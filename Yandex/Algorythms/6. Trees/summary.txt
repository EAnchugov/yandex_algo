    На собеседованиях дерево задаётся одним из двух способов:
    - Как обычный граф, матрицей смежности или списком смежных вершин. При этом гарантируется, что граф — дерево.
    - Структурой, описывающей узел бинарного дерева. На вход вашему решению передаётся корень дерева.
    В подобной задаче вам может потребоваться описать такую структуру.
    Убедитесь, что помните, как это делать в вашем языке программирования.
    На всякий случай потренируйтесь решать задачи без подготовленного шаблона, чтобы не допустить ошибку на собеседовании.

    class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def traverse(root):
...

    У всех возможных задач на деревья общая идея решения: нужно применить поиск в глубину, то есть рекурсивный обход дерева, начиная с корня.

    Способы обхода:
     - Preorder: сначала посещаем текущую вершину, затем рассматриваем её поддеревья.
            Например: Заданы зависимости вида «задача A должна быть выполнена ранее задачи B». Нужно сформировать корректную последовательность выполнения задач.
     - Inorder: рассматриваем левое поддерево, посещаем текущую вершину и затем рассматриваем правое поддерево. Применим только к бинарным деревьям.
            Напимер: Вывести все ключи двоичного дерева поиска в порядке неубывания.
     - Postorder: рассматриваем все поддеревья текущей вершины, затем посещаем её.
            Yfghbvth Для двух вершин в дереве найти наименьшего общего предка.

            class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def get_layered_representation(root):
    result = []
    DFS(root, 0, result)
    return result

def DFS(node, depth, result):
    if not node:
        return
    # Т.к. мы выбрали preorder, то результат нужно увеличивать
    # не больше, чем на 1
    if depth >= len(result):
        result.append([])
    result[depth].append(node.val)
    DFS(node.left, depth + 1, result)
    DFS(node.right, depth + 1, result)